/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGraphique;

import Model.Caillou;
import Model.Coordonnees;
import Model.Direction;
import Model.Jeton;
import Model.Joueur;
import Model.JoueurIA;
import Model.Monstre;
import Model.Partie;
import Model.Pion;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Corentin
 */
public class Fenster extends javax.swing.JFrame implements Vue {

    public static final String VERSION = "0.2";

    /**
     * Creates new form Fenste
     */
    public Fenster() {
        initComponents();
        this.getContentPane().setBackground(BG_COLOR);

        // this.updatePlateau();
        /*
            LÃ  c'est des essais
         */
//        plateau.add(pionsPurple[0], new Integer(1));
//        pionsPurple[0].setLocation(106, 220);
//        pionsPurple[0].setOpaque(false);
//
//        int larg = 4;
//        int haut = 220;
//        for (int i = 1; i < 4; i++) {
//            plateau.add(pionsPurple[i], new Integer(1));
//            larg++;
//            pionsPurple[i].setLocation(plateau.position(new Coordonnees(6, larg)));
//            pionsPurple[i].setOpaque(false);
//        }
//
//        JFlaque flaque = new JFlaque(JFlaque.Forme.HORIZ);
//        flaque.setLocation(plateau.position(new Coordonnees(5, 6)));
//        flaque.setOpaque(false);
//        plateau.add(flaque, new Integer(0));
//        sortis.add(pionsGreen[1]);
//        sortis.add(pionsGreen[2]);
        //pionsGreen[1].setLocation(plateau.position(new Coordonnees(5, 1)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sortis = new JGroupePions(false);
        salleAttenteGreen = new JGroupePions(true);
        salleAttenteRed = new JGroupePions(true);
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nomJoueurRouge = new javax.swing.JLabel();
        nomJoueurVert = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuPartie = new javax.swing.JMenu();
        jMenuItemNewGame = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Finstere Flure v" +this.VERSION);
        setFocusCycleRoot(false);
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 800));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        sortis.setBackground(null);
        sortis.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        sortis.setPreferredSize(new java.awt.Dimension(40, 374));

        javax.swing.GroupLayout sortisLayout = new javax.swing.GroupLayout(sortis);
        sortis.setLayout(sortisLayout);
        sortisLayout.setHorizontalGroup(
            sortisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        sortisLayout.setVerticalGroup(
            sortisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        salleAttenteGreen.setBackground(null);
        salleAttenteGreen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        salleAttenteGreen.setPreferredSize(new java.awt.Dimension(301, 40));

        javax.swing.GroupLayout salleAttenteGreenLayout = new javax.swing.GroupLayout(salleAttenteGreen);
        salleAttenteGreen.setLayout(salleAttenteGreenLayout);
        salleAttenteGreenLayout.setHorizontalGroup(
            salleAttenteGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        salleAttenteGreenLayout.setVerticalGroup(
            salleAttenteGreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        salleAttenteRed.setBackground(null);
        salleAttenteRed.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        salleAttenteRed.setPreferredSize(new java.awt.Dimension(301, 40));

        javax.swing.GroupLayout salleAttenteRedLayout = new javax.swing.GroupLayout(salleAttenteRed);
        salleAttenteRed.setLayout(salleAttenteRedLayout);
        salleAttenteRedLayout.setHorizontalGroup(
            salleAttenteRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        salleAttenteRedLayout.setVerticalGroup(
            salleAttenteRedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        jLabel1.setText("Rouge :");

        jLabel2.setText("Vert :");

        jButton1.setText("Entrer sur le plateau");
        jButton1.setEnabled(false);

        jButton2.setText("Terminer le tour");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jMenuPartie.setText("Partie");
        jMenuPartie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuPartieActionPerformed(evt);
            }
        });

        jMenuItemNewGame.setText("Nouvelle partie...");
        jMenuItemNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNewGameActionPerformed(evt);
            }
        });
        jMenuPartie.add(jMenuItemNewGame);
        jMenuPartie.add(jSeparator1);

        jMenuItem2.setText("Historique");
        jMenuPartie.add(jMenuItem2);

        jMenuItem3.setText("Options");
        jMenuPartie.add(jMenuItem3);
        jMenuPartie.add(jSeparator2);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem4.setText("Quitter");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenuPartie.add(jMenuItem4);

        jMenuBar1.add(jMenuPartie);

        jMenuHelp.setText("?");

        jMenuItem5.setText("Aide");
        jMenuHelp.add(jMenuItem5);

        jMenuItem6.setText("A propos...");
        jMenuHelp.add(jMenuItem6);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(sortis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salleAttenteRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nomJoueurRouge, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nomJoueurVert, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(salleAttenteGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(jButton1))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2)
                        .addGap(441, 441, 441)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(sortis, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(salleAttenteRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salleAttenteGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(nomJoueurRouge, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(nomJoueurVert, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78)
                .addComponent(jButton2)
                .addGap(72, 72, 72))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Detection de la pression d'une touche du clavier. Si c'est une des
     * flÃ¨ches et qu'un pion est sÃ©lectionnÃ©, on essaye de dÃ©placer ce pion dans
     * la direction de la flÃ¨che.
     *
     * @param evt
     */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        Direction d = null;
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_DOWN:
                d = Direction.BAS;
                break;
            case KeyEvent.VK_UP:
                d = Direction.HAUT;
                break;
            case KeyEvent.VK_LEFT:
                d = Direction.GAUCHE;
                break;
            case KeyEvent.VK_RIGHT:
                d = Direction.DROITE;
                break;
        }

        if (selected != null && d != null) {

            /*
            METTRE ICI LES INSTRUCTIONS DE DEPLACEMENT
             */
            selected.setLocation(plateau.position(selected.getCoordonnees().plus(d.getVector())));
        }
    }//GEN-LAST:event_formKeyPressed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItemNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewGameActionPerformed
        String[] typePartie = {"2 joueurs", "contre l'ordinateur"};
        int rang = JOptionPane.showOptionDialog(null, "Quel type de partie voulez-vous jouer ?", "Type partie", JOptionPane.OK_CANCEL_OPTION, -1, null, typePartie, typePartie[0]);
        if (rang == 0) {//Si partie 2 joueurs
            //Faire s'authentifier les joueurs

            initPartie(new Joueur("joueur 1"), new Joueur("Joueur 22"));
        } else {//Si contre IA
            //Faire s'authentifier le joueur
            initPartie(new Joueur("joueur 1"), new JoueurIA());
        }


    }//GEN-LAST:event_jMenuItemNewGameActionPerformed

    private void jMenuPartieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuPartieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuPartieActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * Instructions Ã  Ã©xÃ©cuter quand on clique sur un pion : on le sÃ©lectionne
     *
     * @param evt
     */
    private void pionClicked(MouseEvent evt) {
        //vÃ©rifier que on a bien cliquÃ© sur un de ses pions, et pas de l'adversaire
        JPion clicked = (JPion) evt.getSource();
        if (clicked.isEnabled()) {
            //this.selected.unselect();
            this.selected.setBorder(null);
            this.selected = clicked;
            //this.selected.select();
            this.selected.setBorder(BorderFactory.createLineBorder(Color.yellow, 5)); //Queque chose pour montrer que le pion est sÃ©lectionnÃ©
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the STANDARD look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Fenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Fenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Fenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Fenster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Fenster.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Fenster.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Fenster.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Fenster.class.getName()).log(Level.SEVERE, null, ex);
        }
//</editor-fold>
//</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Fenster().setVisible(true);
            }
        });
    }

    public void initPartie(Joueur j1, Joueur j2) {
        
        
        this.partie = new Partie(this, j1, j2);

        
        this.nomJoueurRouge.setText(j1.getPseudo());
        this.nomJoueurVert.setText(j2.getPseudo());
        
        
        /*
        CrÃ©ation du monstre
         */
        String[] spritesMonstre = {"monstre1.gif", "monstre2.gif", "monstre3.gif", "monstre4.gif"};
        monstre = new JPion(spritesMonstre);
        monstre.setOpaque(false);

        /*
          CrÃ©ation des jetons joueurs avec ajout de leurs images
         */
        String[] adresses = {"pionred_1_6_clair.gif", "pionpurple_1_6_fonce.gif"};
        pionsPurple[0] = new JPion(adresses);
        String[] adresses2 = {"pionred_3_4_clair.gif", "pionpurple_3_4_fonce.gif"};
        pionsPurple[1] = new JPion(adresses2);
        String[] adresses3 = {"pionred_4_3_clair.gif", "pionpurple_4_3_fonce.gif"};
        pionsPurple[2] = new JPion(adresses3);
        String[] adresses4 = {"pionred_5_2_clair.gif", "pionpurple_5_2_fonce.gif"};
        pionsPurple[3] = new JPion(adresses4);

        String[] adresses5 = {"piongreen_1_6_clair.gif", "piongreen_1_6_fonce.gif"};
        pionsGreen[0] = new JPion(adresses5);
        String[] adresses6 = {"piongreen_3_4_clair.gif", "piongreen_3_4_fonce.gif"};
        pionsGreen[1] = new JPion(adresses6);
        String[] adresses7 = {"piongreen_4_3_clair.gif", "piongreen_4_3_fonce.gif"};
        pionsGreen[2] = new JPion(adresses7);
        String[] adresses8 = {"piongreen_5_2_clair.gif", "piongreen_5_2_fonce.gif"};
        pionsGreen[3] = new JPion(adresses8);

        /*
            A chaque jeton on ajoute un MouseListener afin de dÃ©tecter un clic dessus, et on rend le pion transparent
         */
        for (JPion p : pionsPurple) {
            p.setOpaque(false);
            p.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    pionClicked(evt);
                }
            });
        }

        for (JPion p : pionsGreen) {
            p.setOpaque(false);
            p.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    pionClicked(evt);
                }
            });
        }

        /*
            CrÃ©ation et initialisation du plateau
         */
        plateau = new JPlateau();
        plateau.setBounds(100, 50, 694, 479);//permet de dÃ©finir la position et la taille en mÃªme temps        
        this.add(plateau);

        updatePlateau();

        this.pack();
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemNewGame;
    private javax.swing.JMenu jMenuPartie;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JLabel nomJoueurRouge;
    private javax.swing.JLabel nomJoueurVert;
    private javax.swing.JPanel salleAttenteGreen;
    private javax.swing.JPanel salleAttenteRed;
    private javax.swing.JPanel sortis;
    // End of variables declaration//GEN-END:variables
    JPion[] pionsPurple = new JPion[4];
    JPion[] pionsGreen = new JPion[4];
    JPion monstre;
    JPlateau plateau;
    JPion selected = new JPion(new String[1]);

    boolean typePartie; //false : 2 joueurs, true : contre IA

    public final Color BG_COLOR = new Color(220, 205, 245);

    Partie partie;

    /**
     * Met Ã  jour le plateau et des salles d'attente et d'arrivÃ©e.
     */
    @Override
    public void updatePlateau() {

        //On supprime toutes les entitÃ©s du plateau qui sont sur la couche 1 = tout sauf les tÃ¢ches de sang
        Component[] pions = plateau.getComponentsInLayer(1);
        for (Component c : pions) {
            plateau.remove(c);
        }
        salleAttenteGreen.removeAll();
        salleAttenteRed.removeAll();

        //On affiche les jetons
        for (int i = 0; i < 4; i++) {
            Jeton jeton = this.partie.getJoueur1().getPions()[i];
            JPion jetonAffiche = pionsPurple[i];
            //On n'affiche que les pions vivants
            if (jeton.getVivant() && jeton.getEnJeu()) {//On ne met pas Ã  jour les pions sortis car une fois qu'ils sont dÃ©jÃ  sortis, ils peuvent pas aller ailleurs !! (cf. "Vous sortes !")
                if (jeton.getSurPlateau()) {
                    jetonAffiche.setLocation(plateau.position(jeton.getPosition()));

                    //Revoir s'il faut vÃ©rifier le sprite
                    plateau.add(jetonAffiche, new Integer(1));
                } else { //Le jeton est dans la rÃ©serve
                    salleAttenteRed.add(jetonAffiche);
                }

            }
        }

        for (int i = 0; i < 4; i++) {
            Jeton jeton = this.partie.getJoueur2().getPions()[i];
            JPion jetonAffiche = pionsGreen[i];
            //On n'affiche que les pions vivants
            if (jeton.getVivant() && jeton.getEnJeu()) {//On ne met pas Ã  jour les pions sortis car une fois qu'ils sont dÃ©jÃ  sortis, ils peuvent pas aller ailleurs !! (cf. "Vous sortes !")
                if (jeton.getSurPlateau()) {
                    jetonAffiche.setLocation(plateau.position(jeton.getPosition()));

                    //Revoir s'il faut vÃ©rifier le sprite
                    plateau.add(jetonAffiche, new Integer(1));
                } else { //Le jeton est dans la rÃ©serve
                    salleAttenteGreen.add(jetonAffiche);
                }

            }
        }

        //On parcourt le plateau du modÃ¨le
        for (Pion p : this.partie.getPlateau().getPlateau().values()) {

            //On affiche les cailloux
            if (p instanceof Caillou) {
                String[] sprite = new String[1];
                sprite[0] = "mur.png";
                JPion caillou = new JPion(sprite);//On crÃ©Ã© un nouveau caillou
                caillou.setLocation(plateau.position(p.getPosition())); //plateau.position(Coordonnees c) est le convertisseur qui transforme les coordonnÃ©es en la position en pixels sur l'Ã©cran
                plateau.add(caillou, new Integer(1));

                //On affiche le monstre
            } else if (p instanceof Monstre) {
                Monstre m = (Monstre) p;//On est obligÃ© de convertir en Monstre pour pouvoir utiliser getDirection()
                monstre.setLocation(plateau.position(p.getPosition()));
                switch (m.getDirection()) {//On attribue au monstre le sprite correspondant Ã  sa direction
                    case HAUT:
                        monstre.setSprite(0);
                        break;
                    case DROITE:
                        monstre.setSprite(1);
                        break;
                    case BAS:
                        monstre.setSprite(2);
                        break;
                    case GAUCHE:
                        monstre.setSprite(3);
                        break;
                }
                plateau.add(monstre, new Integer(1));

            }
        }
    }

}
